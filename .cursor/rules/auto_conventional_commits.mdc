---
description: 
globs: 
alwaysApply: false
---
# Rule: Automatic Conventional Commits After Cursor Operations

## Description
This rule implements an automatic commit workflow that:
1. Commits changes after each Cursor AI operation
2. Uses conventional commit format for all commit messages
3. Includes detailed explanations of what was changed
4. Explains why files were changed based on user prompts

## Implementation Details

### Commit Timing
- Automatically commit after each successful Cursor AI operation
- Only commit when actual file changes have occurred
- Group related changes into a single logical commit when possible

### Conventional Commit Format
All commit messages must follow the conventional commit format:
```
<type>(<scope>): <short summary>

<detailed description>

<explanation of why changes were made>

<footer>
```

Where:
- **type**: feat, fix, docs, style, refactor, test, chore, etc.
- **scope**: optional component/module affected (in parentheses)
- **short summary**: concise description in present tense, not capitalized, no period (limit to 50 characters)
- **detailed description**: what was changed in detail (wrap at 72 characters per line)
- **explanation**: why changes were made, referencing user prompts
- **footer**: optional metadata like "Fixes #123" or "BREAKING CHANGE: description"

### Types of Changes
- **feat**: A new feature
- **fix**: A bug fix
- **docs**: Documentation changes
- **style**: Changes that don't affect code functionality (formatting, etc.)
- **refactor**: Code changes that neither fix bugs nor add features
- **perf**: Performance improvements
- **test**: Adding or modifying tests
- **chore**: Changes to build process, tools, etc.
- **ci**: Changes to CI configuration files and scripts
- **build**: Changes that affect the build system or external dependencies

### Breaking Changes
Breaking changes must be indicated in the footer with the text "BREAKING CHANGE:" followed by a space or two newlines. The rest of the commit message is then used to describe the breaking change.

Example:
```
feat(api): change authentication endpoints

BREAKING CHANGE: The authentication endpoints now use JWT tokens instead of session cookies
```

### Example Commit Message
```
feat(auth): add user authentication flow

- Add login form component with email/password fields
- Create authentication service with JWT handling
- Implement protected route wrapper

Changes made in response to user request for "implementing secure login
functionality with JWT token-based authentication"

Fixes #42
```

### Enforcement Mechanism
- Implement a pre-commit hook to validate commit messages
- Provide clear error messages when commit messages don't follow the convention
- Allow for emergency bypass with explicit override flag for exceptional cases

## Benefits
- Maintains a detailed, consistent commit history
- Makes code changes traceable to specific user requests
- Facilitates code reviews and rollbacks if needed
- Provides context for why changes were made
- Enables better collaboration through clear change documentation
- Supports automatic generation of changelogs
- Enables semantic versioning automation based on commit types

## Automation Opportunities
- Automatic CHANGELOG generation based on commit history
- Semantic version bumping based on commit types (feat → minor, fix → patch, BREAKING CHANGE → major)
- Integration with issue tracking systems via footer references
- Automated release notes generation