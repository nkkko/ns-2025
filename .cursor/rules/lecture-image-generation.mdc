---
description: 
globs: 
alwaysApply: false
---
 ---
description: Guidelines for creating Python scripts that generate images for lecture slides
globs: lectures/*/generate_*.py
alwaysApply: false
---
# Rule: Lecture Image Generation Best Practices

## Description
This rule provides guidelines for creating Python scripts that generate images to support lecture slides, ensuring consistency, reproducibility, and proper integration with Marp-based lecture content.

## Implementation Details

### Script Organization
- Name scripts with descriptive prefixes (e.g., `generate_component_images.py`)
- Place scripts in the specific lecture directory (e.g., `lectures/04/generate_component_images.py`)
- Always create a dedicated `images` subdirectory for output: `os.makedirs('images', exist_ok=True)`
- Set a random seed for reproducibility: `np.random.seed(42)`
- Example structure:
  ```python
  import networkx as nx
  import matplotlib.pyplot as plt
  import numpy as np
  import os
  
  # Create images directory if it doesn't exist
  os.makedirs('images', exist_ok=True)
  
  # Set random seed for reproducibility
  np.random.seed(42)
  
  # Image generation functions
  def generate_image_1():
      # ...
      plt.savefig('images/image_1.png')
      
  # Main execution
  if __name__ == "__main__":
      generate_image_1()
      # ... other generation functions
  ```

### Image Formatting and Sizing
- Use consistent figure sizes (e.g., `figsize=(10, 8)`)
- Set appropriate DPI for clear display in presentations (at least 100 DPI)
- Apply consistent styling for similar image types
- Include descriptive titles in generated images
- Close figures after saving to prevent memory issues: `plt.close()`
- Create a reusable function for consistent styling:
  ```python
  def save_figure(G, filename, pos=None, title=None, figsize=(10, 8), dpi=100):
      plt.figure(figsize=figsize)
      
      if title:
          plt.title(title, fontsize=16)
          
      # ... drawing code ...
      
      plt.axis('off')
      plt.tight_layout()
      plt.savefig(f'images/{filename}', dpi=dpi)
      plt.close()
  ```

### Image Generation Functions
- Create separate functions for each distinct image type
- Include descriptive docstrings explaining the purpose of each image
- Return useful objects created during generation (e.g., graph, positions) for potential reuse
- Print progress messages during generation for long-running scripts
- Example:
  ```python
  def create_network_visualization():
      """Generate visualization of network with highlighted features."""
      print("Generating network visualization...")
      
      # Create and configure the graph
      G = nx.Graph()
      # ... graph creation code ...
      
      # Save visualization
      save_figure(G, 'network_visualization.png', title='Network Visualization')
      
      return G
  ```

### Marp Image Integration
- Use Marp's image syntax with width/height control in the lecture markdown:
  ```markdown
  ![width:800px](mdc:images/image_name.png)
  ```
- Consider creating both full-size and thumbnail versions for complex visualizations
- For background images, use Marp's background image directive:
  ```markdown
  ![bg right:40%](mdc:images/background_image.png)
  ```
- Create separate slides for each major visualization
- Include code examples alongside visualizations where appropriate

### Dependencies and Requirements
- Document all required dependencies at the top of the script
- Include specific versions of key libraries to ensure reproducibility
- Consider providing a `requirements.txt` file if using specialized libraries
- Handle missing dependencies gracefully with informative error messages
- Example requirements documentation:
  ```python
  # Required packages:
  # - networkx>=2.6
  # - matplotlib>=3.4
  # - numpy>=1.20
  ```

### Repository Structure Compatibility
- Ensure relative paths work correctly from the lecture directory
- Use appropriate lecture-specific numbering for image filenames
- Make scripts runnable from both the lecture directory and the project root

## Benefits
- Consistent image quality across all lecture materials
- Reproducible visualizations that can be regenerated if needed
- Clear organization making it easy to find and update image generation code
- Seamless integration with Marp-based presentations
- Version-controlled image generation process