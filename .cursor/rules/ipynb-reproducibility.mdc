---
description: 
globs: 
alwaysApply: false
---
name: "Jupyter Notebook Reproducibility"
description: "Best practices for ensuring reproducible results in Jupyter notebooks"
tags: ["jupyter", "python", "notebook", "reproducibility", "data-science"]
fileMatch: ["**/*.ipynb"]
severity: "suggestion"

rule: |
  # Reproducibility in Jupyter Notebooks

  ## Seed Setting
  - Set random seeds for all sources of randomness (numpy, random, tensorflow, pytorch, etc.)
  - Document the random seed values used
  - Set seeds before any stochastic operations
  - Consider using a single seed value across all libraries
  - Re-set seeds before each stochastic process for complete reproducibility

  ## Data Handling
  - Include data provenance information (source, date retrieved, version)
  - Document any data preprocessing steps in detail
  - Consider including data snapshots for small datasets
  - For large datasets, provide clear instructions on how to obtain the same data
  - Use relative paths for data files or environment variables for paths

  ## Environment Documentation
  - Document the full computational environment (OS, Python version, package versions)
  - Include a `requirements.txt` or `environment.yml` file
  - Consider using Docker containers for complete environment reproducibility
  - Document hardware requirements for compute-intensive notebooks
  - Note any specific configurations needed (e.g., CUDA version for GPU usage)

  ## Execution Order
  - Ensure the notebook can be run from top to bottom without errors
  - Avoid hidden state dependencies between cells
  - Include a "Restart and Run All" test before sharing
  - Document any manual steps required (e.g., API keys that need to be entered)
  - Consider using notebook parameterization for configurable analysis