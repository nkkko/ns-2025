---
description: 
globs: 
alwaysApply: false
---
name: "Jupyter Notebook Code Organization"
description: "Guidelines for organizing code in Jupyter notebooks"
tags: ["jupyter", "python", "notebook", "organization"]
fileMatch: ["**/*.ipynb"]
severity: "suggestion"

rule: |
  # Code Organization in Jupyter Notebooks

  ## Cell Structure
  - Keep cells focused on a single task or concept
  - Limit cell length to 20-25 lines for better readability
  - Use logical cell ordering that follows a clear narrative flow
  - Break complex operations into multiple cells for easier debugging

  ## Code Structure
  - Define functions and classes in dedicated cells
  - Place import statements at the beginning of the notebook
  - Use consistent naming conventions (snake_case for variables/functions, PascalCase for classes)
  - Avoid global variables when possible
  - Implement error handling with try/except blocks for robust execution

  ## Refactoring
  - Consider moving reusable code to external Python modules
  - Refactor repeated code patterns into functions
  - Use helper functions for data preprocessing steps
  - Extract complex visualization code into dedicated functions

  ## Execution Order
  - Ensure cells can be executed sequentially from top to bottom
  - Avoid hidden state dependencies between non-adjacent cells
  - Restart kernel and run all cells periodically to verify notebook integrity